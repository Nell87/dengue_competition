#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr, ggplot2, lubridate, randomForest, caret,
rpart,rpart.plot,tidyr, mice,e1071,zoo,reshape2, plotly,
weathermetrics,gdata,outliers)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
# Setwd (set current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
# Let's read the script with the own functions
source("./script/functions_sara.R")
# reading datasets
data_x <- read.csv("./data/dengue_features_train.csv", stringsAsFactors = F)
data_y<- read.csv("./data/dengue_labels_train.csv", stringsAsFactors = F)
data<- cbind(data_x, total_cases=data_y$total_cases)
validation<- read.csv("./data/dengue_features_test.csv", stringsAsFactors = F)
rm(data_x, data_y)
#### 1.   CLEANING / PREPROCESSING ####
#### 1.1. Transformations _________________________________________________ ####
# Dimensions
dim(data)          # <-  1456 rows    25 columns
library(ggplot2)
library(shiny)
library(shinydashboard)
library(DT)
library(rvest)
library(lubridate)
library(dplyr)
library(gdata)
# Introduce a meteosat link for extracting information about the weather
get.weather<- function(link){
# Extracting data
data <- read_html(link)
data <- html_table(data, fill=TRUE)
data <- data[[1]]
# Renaming columns
colnames(data)<- c("Date", "Time", "Empty", "Temperature", "Wind", "Speed",
"Precipitation")
# Removing useless and empty rows. Also the empty column
data<-data %>% na.omit(Empty) %>%
filter(!grepl("google|Fin de semana", Empty)) %>%
filter(!(Temperature=="")) %>% select(-Empty)
# Fixing date: removing characters
# ^ start of string  \\D+  one or more chars other than digit
data$Date<- sub("^\\D+", "", data$Date)
data$Date<-dmy(noquote(data$Date))
# Fixing date: filling in the empty cells
for(i in 1:length(data$Date)){
if(is.na(data$Date[i])){
data$Date[i]<-lag(data$Date)[i]
}
}
# Fixing Time,  temperature, speed, precipitation and speed
data<- data %>% filter(!grepl("de", Time))
data$Time<- as.numeric(sub("\\ .*", "", data$Time))
data$Temperature<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Temperature))
data$Speed<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Speed))
data$Precipitation<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Precipitation))
data$Wind<- as.factor(data$Wind)
# Creating datetime
# data$DateTime<- ymd_h(paste(data$Date, data$Time))
# data<- data %>% select(-Time, -Date)
return(data)
}
# Extracting data
Coruna<-get.weather("https://www.meteosat.com/tiempo/a-coruna/tiempo-a-coruna-la-coruna.html")
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
#### 1.   SHINY ___________________________________________________________ ####
ui <- dashboardPage(
# Title
dashboardHeader(title = span("Where should I go this weekend? ",
style = "color: black; font-size: 12px;
font-weight: bold")),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Datasets", tabName = "datasets", icon =icon("table")),
menuItem("Graphs", tabName = "graphs", icon =icon("bar-chart-o"),
selected = TRUE)),
selectInput(inputId = "variable", label = "What would you like to know?",
choices=c("Temperature","Speed","Precipitation"))
),
# Body
dashboardBody(
tabItems(
tabItem(tabName = "datasets",
fluidRow(
# cadiz
column(width=4,
box(width = NULL,
title = "Cadiz",DT::dataTableOutput("dataCadiz")
)),
# Barcelona
column(width=4,
box(width = NULL,
title = "Barcelona",DT::dataTableOutput("dataBcn")
)),
# CoruÃ±a
column(width=4,
box(width = NULL,
title = "Coruna",DT::dataTableOutput("dataCoruna")
))
)
#
),
tabItem(tabName = "graphs",
# cadiz
fluidRow(
box(width = NULL,
title = "",
plotOutput("plotAll",width="100%",height=400)
))
)
)
)
)
install.packages(shiny, dependencies = T)
install.packages("shiny", dependencies = T)
install.packages("shiny", dependencies = T)
install.packages("shinydashboard", dependencies = T)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(DT)
library(rvest)
library(lubridate)
library(dplyr)
library(gdata)
# Introduce a meteosat link for extracting information about the weather
get.weather<- function(link){
# Extracting data
data <- read_html(link)
data <- html_table(data, fill=TRUE)
data <- data[[1]]
# Renaming columns
colnames(data)<- c("Date", "Time", "Empty", "Temperature", "Wind", "Speed",
"Precipitation")
# Removing useless and empty rows. Also the empty column
data<-data %>% na.omit(Empty) %>%
filter(!grepl("google|Fin de semana", Empty)) %>%
filter(!(Temperature=="")) %>% select(-Empty)
# Fixing date: removing characters
# ^ start of string  \\D+  one or more chars other than digit
data$Date<- sub("^\\D+", "", data$Date)
data$Date<-dmy(noquote(data$Date))
# Fixing date: filling in the empty cells
for(i in 1:length(data$Date)){
if(is.na(data$Date[i])){
data$Date[i]<-lag(data$Date)[i]
}
}
# Fixing Time,  temperature, speed, precipitation and speed
data<- data %>% filter(!grepl("de", Time))
data$Time<- as.numeric(sub("\\ .*", "", data$Time))
data$Temperature<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Temperature))
data$Speed<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Speed))
data$Precipitation<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Precipitation))
data$Wind<- as.factor(data$Wind)
# Creating datetime
# data$DateTime<- ymd_h(paste(data$Date, data$Time))
# data<- data %>% select(-Time, -Date)
return(data)
}
# Extracting data
Coruna<-get.weather("https://www.meteosat.com/tiempo/a-coruna/tiempo-a-coruna-la-coruna.html")
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
#### 1.   SHINY ___________________________________________________________ ####
ui <- dashboardPage(
# Title
dashboardHeader(title = span("Where should I go this weekend? ",
style = "color: black; font-size: 12px;
font-weight: bold")),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Datasets", tabName = "datasets", icon =icon("table")),
menuItem("Graphs", tabName = "graphs", icon =icon("bar-chart-o"),
selected = TRUE)),
selectInput(inputId = "variable", label = "What would you like to know?",
choices=c("Temperature","Speed","Precipitation"))
),
# Body
dashboardBody(
tabItems(
tabItem(tabName = "datasets",
fluidRow(
# cadiz
column(width=4,
box(width = NULL,
title = "Cadiz",DT::dataTableOutput("dataCadiz")
)),
# Barcelona
column(width=4,
box(width = NULL,
title = "Barcelona",DT::dataTableOutput("dataBcn")
)),
# CoruÃ±a
column(width=4,
box(width = NULL,
title = "Coruna",DT::dataTableOutput("dataCoruna")
))
)
#
),
tabItem(tabName = "graphs",
# cadiz
fluidRow(
box(width = NULL,
title = "",
plotOutput("plotAll",width="100%",height=400)
))
)
)
)
)
install.packages("DT", dependencies = T)
install.packages("rvest", dependencies = T)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(DT)
library(rvest)
library(lubridate)
library(dplyr)
library(gdata)
# Introduce a meteosat link for extracting information about the weather
get.weather<- function(link){
# Extracting data
data <- read_html(link)
data <- html_table(data, fill=TRUE)
data <- data[[1]]
# Renaming columns
colnames(data)<- c("Date", "Time", "Empty", "Temperature", "Wind", "Speed",
"Precipitation")
# Removing useless and empty rows. Also the empty column
data<-data %>% na.omit(Empty) %>%
filter(!grepl("google|Fin de semana", Empty)) %>%
filter(!(Temperature=="")) %>% select(-Empty)
# Fixing date: removing characters
# ^ start of string  \\D+  one or more chars other than digit
data$Date<- sub("^\\D+", "", data$Date)
data$Date<-dmy(noquote(data$Date))
# Fixing date: filling in the empty cells
for(i in 1:length(data$Date)){
if(is.na(data$Date[i])){
data$Date[i]<-lag(data$Date)[i]
}
}
# Fixing Time,  temperature, speed, precipitation and speed
data<- data %>% filter(!grepl("de", Time))
data$Time<- as.numeric(sub("\\ .*", "", data$Time))
data$Temperature<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Temperature))
data$Speed<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Speed))
data$Precipitation<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Precipitation))
data$Wind<- as.factor(data$Wind)
# Creating datetime
# data$DateTime<- ymd_h(paste(data$Date, data$Time))
# data<- data %>% select(-Time, -Date)
return(data)
}
# Extracting data
Coruna<-get.weather("https://www.meteosat.com/tiempo/a-coruna/tiempo-a-coruna-la-coruna.html")
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
#### 1.   SHINY ___________________________________________________________ ####
ui <- dashboardPage(
# Title
dashboardHeader(title = span("Where should I go this weekend? ",
style = "color: black; font-size: 12px;
font-weight: bold")),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Datasets", tabName = "datasets", icon =icon("table")),
menuItem("Graphs", tabName = "graphs", icon =icon("bar-chart-o"),
selected = TRUE)),
selectInput(inputId = "variable", label = "What would you like to know?",
choices=c("Temperature","Speed","Precipitation"))
),
# Body
dashboardBody(
tabItems(
tabItem(tabName = "datasets",
fluidRow(
# cadiz
column(width=4,
box(width = NULL,
title = "Cadiz",DT::dataTableOutput("dataCadiz")
)),
# Barcelona
column(width=4,
box(width = NULL,
title = "Barcelona",DT::dataTableOutput("dataBcn")
)),
# CoruÃ±a
column(width=4,
box(width = NULL,
title = "Coruna",DT::dataTableOutput("dataCoruna")
))
)
#
),
tabItem(tabName = "graphs",
# cadiz
fluidRow(
box(width = NULL,
title = "",
plotOutput("plotAll",width="100%",height=400)
))
)
)
)
)
# Introduce a meteosat link for extracting information about the weather
get.weather<- function(link){
# Extracting data
data <- read_html(link)
data <- html_table(data, fill=TRUE)
data <- data[[1]]
# Renaming columns
colnames(data)<- c("Date", "Time", "Empty", "Temperature", "Wind", "Speed",
"Precipitation")
# Removing useless and empty rows. Also the empty column
data<-data %>% na.omit(Empty) %>%
filter(!grepl("google|Fin de semana", Empty)) %>%
filter(!(Temperature=="")) %>% select(-Empty)
# Fixing date: removing characters
# ^ start of string  \\D+  one or more chars other than digit
data$Date<- sub("^\\D+", "", data$Date)
data$Date<-dmy(noquote(data$Date))
# Fixing date: filling in the empty cells
for(i in 1:length(data$Date)){
if(is.na(data$Date[i])){
data$Date[i]<-lag(data$Date)[i]
}
}
# Fixing Time,  temperature, speed, precipitation and speed
data<- data %>% filter(!grepl("de", Time))
data$Time<- as.numeric(sub("\\ .*", "", data$Time))
data$Temperature<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Temperature))
data$Speed<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Speed))
data$Precipitation<- as.numeric(gsub("([0-9]+).*$", "\\1", data$Precipitation))
data$Wind<- as.factor(data$Wind)
# Creating datetime
# data$DateTime<- ymd_h(paste(data$Date, data$Time))
# data<- data %>% select(-Time, -Date)
return(data)
}
# Extracting data
Coruna<-get.weather("https://www.meteosat.com/tiempo/a-coruna/tiempo-a-coruna-la-coruna.html")
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
server <- function(input, output, session) {
observe({
# Re-execute this reactive expression after 1000 milliseconds
invalidateLater(3600000, session)
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
Coruna<-get.weather("https://www.meteosat.com/tiempo/a-coruna/tiempo-a-coruna-la-coruna.html")
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
})
# datasets
output$dataCadiz <- renderDataTable ({
Cadiz %>% select(input$variable)
})
output$dataBcn <- renderDataTable ({
Barcelona %>% select(input$variable)
})
output$dataCoruna <- renderDataTable ({
Coruna %>% select(input$variable)
})
# plots
output$plotAll <- renderPlot ({
Data<- gdata::combine(Cadiz, Barcelona,Coruna)
Data<-Data %>% select(Date, Time,source,Variable=input$variable)
# max<-max(Cadiz[as.character(input$variable)])
# min<-min(Cadiz[as.character(input$variable)])
ggplot(Data,aes(x=Time, y=Variable, color=source)) +
geom_line()+
#ylab(as.character(input$variable))  +
facet_wrap(~Date,scales='free') + theme(axis.line=element_line()) +
scale_y_continuous(limits=c(min(Data$Variable),max(Data$Variable)))
})
}
Cadiz<-get.weather("https://www.meteosat.com/tiempo/cadiz/tiempo-cadiz.html")
View(Cadiz)
View(Coruna)
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
Barcelona<-get.weather("https://www.meteosat.com/tiempo/barcelona/tiempo-barcelona.html")
View(get.weather)
install.packages("lubridate")
install.packages("lubridate")
