rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveProject() # project path
here::here
installed.packages("here")
install.packages("here")
here::here()
# setwd
setwd(here::here)
# setwd
setwd(dirname(here::here))
here::here
here::here()
# setwd
setwd(here::here())
# load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr, ggplot2, lubridate, randomForest, caret,
rpart,rpart.plot,tidyr, mice,e1071,zoo,reshape2, plotly,
weathermetrics,gdata,outliers)
# setwd
setwd(here::here())
# Let's read the script with the own functions
source("./script/functions_sara.R")
# reading datasets
data_x <- read.csv("./data/dengue_features_train.csv", stringsAsFactors = F)
data_y<- read.csv("./data/dengue_labels_train.csv", stringsAsFactors = F)
data<- cbind(data_x, total_cases=data_y$total_cases)
validation<- read.csv("./data/dengue_features_test.csv", stringsAsFactors = F)
rm(data_x, data_y)
install.packages("rmdformats")
?source
?read_chunk
summary(data_iq$year)
# load Libraries: p_load can install, load,  and update packages
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
library(gdata)
library(here)
# reading datasets
data_x <- read.csv("dengue_features_train.csv", stringsAsFactors = F)
data_y<- read.csv("dengue_labels_train.csv", stringsAsFactors = F)
data<- cbind(data_x, total_cases=data_y$total_cases)
validation<- read.csv("dengue_features_test.csv", stringsAsFactors = F)
rm(data_x, data_y)
# Rename variables
data <- data %>% rename("precip_amt"= "precipitation_amt_mm",
"precip_mm_r"= "reanalysis_sat_precip_amt_mm",
"temp_dewpoint_r"="reanalysis_dew_point_temp_k",
"temp_air_mean_r" = "reanalysis_air_temp_k",
"humid_relative_r" = "reanalysis_relative_humidity_percent",
"humid_specific_r" = "reanalysis_specific_humidity_g_per_kg",
"precip_kgperm2_r" = "reanalysis_precip_amt_kg_per_m2",
"temp_max_r" = "reanalysis_max_air_temp_k",
"temp_min_r" = "reanalysis_min_air_temp_k",
"temp_air_avg_r" = "reanalysis_avg_temp_k",
"temp_dir_range_r" = "reanalysis_tdtr_k",
"temp_max_st"= "station_max_temp_c",
"temp_min_st"= "station_min_temp_c",
"temp_avg_st"= "station_avg_temp_c",
"precip_st" = "station_precip_mm",
"temp_dir_range_st" = "station_diur_temp_rng_c")
# Rename variables
validation <- validation %>% rename("precip_amt"= "precipitation_amt_mm",
"precip_mm_r"= "reanalysis_sat_precip_amt_mm",
"temp_dewpoint_r"="reanalysis_dew_point_temp_k",
"temp_air_mean_r" = "reanalysis_air_temp_k",
"humid_relative_r" = "reanalysis_relative_humidity_percent",
"humid_specific_r" = "reanalysis_specific_humidity_g_per_kg",
"precip_kgperm2_r" = "reanalysis_precip_amt_kg_per_m2",
"temp_max_r" = "reanalysis_max_air_temp_k",
"temp_min_r" = "reanalysis_min_air_temp_k",
"temp_air_avg_r" = "reanalysis_avg_temp_k",
"temp_dir_range_r" = "reanalysis_tdtr_k",
"temp_max_st"= "station_max_temp_c",
"temp_min_st"= "station_min_temp_c",
"temp_avg_st"= "station_avg_temp_c",
"precip_st" = "station_precip_mm",
"temp_dir_range_st" = "station_diur_temp_rng_c")
# Transform some variables to factor/numeric/datetime
data$week_start_date<- ymd(data$week_start_date)
validation$week_start_date<- ymd(validation$week_start_date)
data$city <- as.factor(data$city)
data$year <- year(data$week_start_date)
data$weekofyear<- as.factor(data$weekofyear)
data$month<- month(data$week_start_date)
validation$city <- as.factor(validation$city)
validation$year<- year(validation$week_start_date)
validation$weekofyear <- as.factor(validation$weekofyear)
validation$month<- month(validation$week_start_date)
validation$total_cases<-0
# Combine train and validation. Then split per city
data_full<-gdata::combine(data, validation)
data_iq<-data_full %>% filter(city=="iq")
data_sj<-data_full %>% filter(city=="sj")
summary(data_iq$year)
summary(data_sj$year)
summary(validation$year)
names(data_iq)
data_iq[which(source=="training")]
View(data_sj)
data_iq[which(source=="data")]
data_iq[which(source==data)]
data_iq[which(source=="data"),]
data_iq[which(data$source=="data"),]
data_iq[which(data_iq$source=="data"),]
names(data_sj)
data_iq[which(data_iq$source=="data"),"source"]
names(data_sj)
data_iq[which(data_iq$source=="data"),c("source", "year"]
data_iq[which(data_iq$source=="data"),c("source", "year")]
View(validation)
data_year<-rbind(data_iq[which(data_iq$source=="data"),c("source", "year")],
data_sj[which(data_iq$source=="data"),c("source", "year")],
data_iq[which(data_iq$source=="validation"),c("source", "year")]
)
View(data_year)
names(data_iq)
data_year<-rbind(data_iq[which(data_iq$source=="data"),c("source", "city","year")],
data_sj[which(data_iq$source=="data"),c("source", "city","year")],
data_iq[which(data_iq$source=="validation"),c("source", "city","year")],
data_sj[which(data_iq$source=="validation"),c("source", "city","year")],
)
data_sj[which(data_iq$source=="data"),c("source", "city","year")]
data_iq[which(data_iq$source=="validation"),c("source", "city","year")]
data_sj[which(data_iq$source=="validation"),c("source", "city","year")]
data_year<-rbind(data_iq[which(data_iq$source=="data"),c("source", "city","year")],
data_sj[which(data_iq$source=="data"),c("source", "city","year")],
data_iq[which(data_iq$source=="validation"),c("source", "city","year")],
data_sj[which(data_iq$source=="validation"),c("source", "city","year")],
)
install.packages("corrplot")
install.packages("weathermetrics")
install.packages("reshape2")
install.packages("reshape2")
